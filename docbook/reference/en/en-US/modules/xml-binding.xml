<chapter id="Built_in_xml_bind_providers">
   <title>&XML-BIND-API; providers</title>

   <para>
      As required by the specification, RESTEasy includes support for (un)marshalling &XML-BIND-API; annotated classes.
      RESTEasy provides multiple providers to address some subtle differences between classes generated by XJC
      and classes which are simply annotated with @XmlRootElement, or working with JAXBElement classes directly.
   </para>
   <para>

      For the most part, developers using the &REST-API; API, the selection of which provider is invoked will be
      completely transparent. For developers wishing to access the providers directly (which most folks won't need to
      do), this document describes which provider is best suited for different configurations.
   </para>
   <para>
      A &XML-BIND-API; Provider is selected by RESTEasy when a parameter or return type is an object that is annotated with
      &XML-BIND-API; annotations (such as @XmlRootEntity or @XmlType) or if the type is a JAXBElement. Additionally, the
      resource class or resource method will be annotated with either a @Consumes or @Produces annotation and
      contain one or more of the following values:
   </para>
   <para>

      <itemizedlist>

         <listitem>
            text/*+xml
         </listitem>

         <listitem>
            application/*+xml
         </listitem>

         <listitem>
            application/*+fastinfoset
         </listitem>

         <listitem>
            application/*+json
         </listitem>

      </itemizedlist>

   </para>
   <para>

   </para>
   <para>

      RESTEasy will select a different provider based on the return type or parameter type used in the resource. This
      section describes how the selection process works.
   </para>
   <para>

      @XmlRootEntity
      When a class is annotated with a @XmlRootElement annotation, RESTEasy will select the
      JAXBXmlRootElementProvider. This provider handles basic marshaling and unmarshalling of custom &XML-BIND-API;
      entities.
   </para>
   <para>

      @XmlType
      Classes which have been generated by XJC will most likely not contain an @XmlRootEntity annotation. In order
      for these classes to marshalled, they must be wrapped within a JAXBElement instance. This is typically
      accomplished by invoking a method on the class which serves as the XmlRegistry and is named ObjectFactory.
   </para>
   <para>

      The JAXBXmlTypeProvider provider is selected when the class is annotated with an XmlType annotation and not an
      XmlRootElement annotation.
   </para>
   <para>

      This provider simplifies this task by attempting to locate the XmlRegistry for the target class. By default, a
      &XML-BIND-API; implementation will create a class called ObjectFactory and is located in the same package as the target
      class. When this class is located, it will contain a &quot;create&quot; method that takes the object instance
      as a parameter. For example, if the target type is called &quot;Contact&quot;, then the ObjectFactory class
      will have a method:
   </para>
   <para>

      public JAXBElement createContact(Contact value) {..
   </para>
   <para>

      JAXBElement&lt;?&gt;
      If your resource works with the JAXBElement class directly, the RESTEasy runtime will select the
      JAXBElementProvider. This provider examines the ParameterizedType value of the JAXBElement in order to select
      the appropriate JAXBContext.
   </para>
   <para>

   </para>
   <para>


   </para>
    <sect1 id="decorators">
        <title>&XML-BIND-API; Decorators</title>
        <para>Resteasy's &XML-BIND-API; providers have a pluggable way to decorate Marshaller and Unmarshaller instances.
        The way it works is that you can write an annotation that can trigger the decoration of a
        Marshaller or Unmarshaller.  Your decorators can do things like set Marshaller or Unmarshaller properties,
        set up validation, and the like.  Here's an example.  Say we want to have an annotation
        that will trigger pretty-printing, nice formatting, of an XML document.  If we were using raw
        &XML-BIND-API;, we would set a property on the Marshaller of Marshaller.JAXB_FORMATTED_OUTPUT.  Let's
        write a Marshaller decorator.</para>
        <para>First define an annotation:</para>
<programlisting>
import org.jboss.resteasy.annotations.Decorator;

@Target({ElementType.TYPE, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
@Decorator(processor = PrettyProcessor.class, target = Marshaller.class)
public @interface Pretty {}
</programlisting>
        <para>For this to work, we must annotate the @Pretty annotation with a meta-annotation called
        @Decorator.  The target() attribute must be the &XML-BIND-API; Marshaller class.  The processor()
        attribute is a class we will write next.</para>
<programlisting><![CDATA[
import org.jboss.resteasy.core.interception.DecoratorProcessor;
import org.jboss.resteasy.annotations.DecorateTypes;

import jakarta.xml.bind.Marshaller;
import jakarta.xml.bind.PropertyException;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.Produces;
import java.lang.annotation.Annotation;

/**
 * @author <a href="mailto:bill@burkecentral.com">Bill Burke</a>
 * @version $Revision: 1 $
 */
@DecorateTypes({"text/*+xml", "application/*+xml"})
public class PrettyProcessor implements DecoratorProcessor<Marshaller, Pretty>
{
    public Marshaller decorate(Marshaller target, Pretty annotation,
                  Class type, Annotation[] annotations, MediaType mediaType)
    {
       target.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
    }
}]]>
</programlisting>
    <para>
        The processor implementation must implement the DecoratorProcessor interface and should also be annotated
        with @DecorateTypes.  This annotation specifies what media types the processor can be used with. Now that
        we've defined our annotation and our Processor, we can use it on our &REST-API; resource methods
        or &XML-BIND-API; types as follows:
    </para>
<programlisting>
@GET
@Pretty
@Produces("application/xml")
public SomeJAXBObject get() {...}
</programlisting>
        <para>Check the RESTEasy source code for the implementation of @XmlHeader for more detailed information</para>
    </sect1>
   <sect1 id="Pluggable_Xml_bind_context_s_with_ContextResolvers">
      <title>Pluggable JAXBContext's with ContextResolvers</title>

      <para>
         Do not use this feature unless you are knowledgeable about using it.
      </para>
      <para>

         Based on the class being marshalling/unmarshalling, RESTEasy will, by default create and cache JAXBContext
         instances per class type. If you do not want RESTEasy to create JAXBContexts, plug in your own by
         implementing an instance of jakarta.ws.rs.ext.ContextResolver
      </para>
      <para>

<programlisting>
public interface ContextResolver&lt;T&gt;
{
    T getContext(Class&lt;?&gt; type);
}

@Provider
@Produces("application/xml")
public class MyJAXBContextResolver implements ContextResolver&lt;JAXBContext&gt;
{
    JAXBContext getContext(Class&lt;?&gt; type)
    {
        if (type.equals(WhateverClassIsOverridedFor.class)) return JAXBContext.newInstance()...;
    }
}
</programlisting>
      </para>
      <para>
         A @Produces annotation must be provided to specify the media type the context is meant for.
         An implementation of ContextResolver&lt;JAXBContext&gt; must be provided and that class must have
         the @Provider annotation. This helps the runtime match to the correct context resolver.
      </para>
      <para>

         There are multiple ways to make this ContextResolver available.
      </para>
      <para>

         <orderedlist>

            <listitem>
               Return it as a class or instance from a jakarta.ws.rs.core.Application implementation
            </listitem>

            <listitem>
               List it as a provider with resteasy.providers
            </listitem>

            <listitem>
               Let RESTEasy automatically scan for it within the WAR file. See Configuration Guide
            </listitem>

            <listitem>
               Manually add it via ResteasyProviderFactory.getInstance().registerProvider(Class) or
               registerProviderInstance(Object)
            </listitem>

         </orderedlist>

      </para>
      <para>


      </para>
   </sect1>
   <sect1 id="XML_BIND_API_+_XML_provider">
      <title>&XML-BIND-API; + XML provider</title>
       <para>
           RESTEasy is required to provide &XML-BIND-API; provider support for XML.  It has a few extra annotations
           that can help code the application.
       </para>
       <sect2 id="XmlHeader">
           <title>@XmlHeader and @Stylesheet</title>
           <para>Sometimes when outputting XML documents you may want to set an XML header. RESTEasy provides
           the @org.jboss.resteasy.annotations.providers.jaxb.XmlHeader annotation for this.  For example:</para>
<programlisting><![CDATA[
@XmlRootElement
public static class Thing
{
    private String name;

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }
}

@Path("/test")
public static class TestService
{
    @GET
    @Path("/header")
    @Produces("application/xml")
    @XmlHeader("<?xml-stylesheet type='text/xsl' href='${baseuri}foo.xsl' ?>")
    public Thing get()
    {
        Thing thing = new Thing();
        thing.setName("bill");
        return thing;
    }
}]]>
</programlisting>
           <para>
               The @XmlHeader forces the XML output to have a xml-stylesheet header.  This header
               could also have been put on the Thing class to get the same result.  See the javadocs for more
               details on how to use substitution values provided by resteasy.
               </para>
           <para>
               RESTEasy also has a convenience annotation for stylesheet headers.  For example:
           </para>
<programlisting><![CDATA[
@XmlRootElement
public static class Thing
{
    private String name;

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }
}

@Path("/test")
public static class TestService
{
    @GET
    @Path("/stylesheet")
    @Produces("application/xml")
    @Stylesheet(type="text/css", href="${basepath}foo.xsl")
    @Junk
    public Thing getStyle()
    {
        Thing thing = new Thing();
        thing.setName("bill");
        return thing;
    }
}]]>
</programlisting>
       </sect2>
   </sect1>
   <sect1 id="XML_BIND_+_XML_provider_+_JSON_provider">
      <title>&XML-BIND-API; + JSON provider</title>

      <para>
         RESTEasy supports the marshalling of &XML-BIND-API; annotated POJOs to and from JSON. This provider wraps the Jackson2 library to accomplish this.
      </para>
      <para>
           To use this integration with Jackson import the resteasy-jackson2-provider Maven module.
       </para>
      <para>
         For example, consider this &XML-BIND-API; class:
      </para>
<programlisting>
@XmlRootElement(name = "book")
public class Book
{
    private String author;
    private String ISBN;
    private String title;

    public Book()
    {
    }

    public Book(String author, String ISBN, String title)
    {
        this.author = author;
        this.ISBN = ISBN;
        this.title = title;
    }

    @XmlElement
    public String getAuthor()
    {
        return author;
    }

    public void setAuthor(String author)
    {
    this.author = author;
    }

    @XmlElement
    public String getISBN()
    {
        return ISBN;
    }

    public void setISBN(String ISBN)
    {
        this.ISBN = ISBN;
    }

    @XmlAttribute
    public String getTitle()
    {
        return title;
    }

    public void setTitle(String title)
    {
        this.title = title;
    }
}
</programlisting>
       <para>
           And we can write a method to use the above entity:
       </para>
<programlisting>
@Path("/test_json")
@GET
@Produces(MediaType.APPLICATION_JSON)
public Book test_json() {
    Book book = new Book();
    book.setTitle("EJB 3.0");
    book.setAuthor("Bill Burke");
    book.setISBN("596529260");
    return book;
}
</programlisting>
       <para>
           When making a requesting of the above method, the default Jackson2 marshaller would return JSON output
           that looked like this:
       </para>
       <para>
<programlisting>
$ http localhost:8080/dummy/test_json
HTTP/1.1 200
...
Content-Type: application/json

{
"ISBN": "596529260",
"author": "Bill Burke",
"title": "EJB 3.0"
}</programlisting>
       </para>
   </sect1>
   <sect1 id="XML_BIND_+_FastinfoSet_provider">
      <title>&XML-BIND-API; + FastinfoSet provider</title>

      <para>

         RESTEasy supports the FastinfoSet mime type with &XML-BIND-API; annotated classes. Fast infoset documents are faster
         to serialize and parse, and smaller in size, than logically equivalent XML documents. Thus, fast infoset
         documents may be used whenever the size and processing time of XML documents is an issue. It is configured
         the same way the  provider is.
      </para>
       <para>
           To use this integration with Fastinfoset import the resteasy-fastinfoset-provider Maven module.
       </para>
      <para>


      </para>
   </sect1>
   <sect1 id="XML_BIND_API_Collections">
      <title>Arrays and Collections of &XML-BIND-API; Objects</title>
      <para>
         RESTEasy will automatically
         marshal arrays, java.util.Set's, and java.util.List's of &XML-BIND-API; objects to and from XML, JSON, Fastinfoset.
      </para>
<programlisting><![CDATA[
@XmlRootElement(name = "customer")
@XmlAccessorType(XmlAccessType.FIELD)
public class Customer
{
    @XmlElement
    private String name;

    public Customer()
    {
    }

    public Customer(String name)
    {
        this.name = name;
    }

    public String getName()
    {
        return name;
    }
}

@Path("/")
public class MyResource
{
    @PUT
    @Path("array")
    @Consumes("application/xml")
    public void putCustomers(Customer[] customers)
    {
        Assert.assertEquals("bill", customers[0].getName());
        Assert.assertEquals("monica", customers[1].getName());
    }

    @GET
    @Path("set")
    @Produces("application/xml")
    public Set<Customer> getCustomerSet()
    {
        HashSet<Customer> set = new HashSet<Customer>();
        set.add(new Customer("bill"));
        set.add(new Customer("monica"));

        return set;
    }

    @PUT
    @Path("list")
    @Consumes("application/xml")
    public void putCustomers(List<Customer> customers)
    {
        Assert.assertEquals("bill", customers.get(0).getName());
        Assert.assertEquals("monica", customers.get(1).getName());
    }
}]]>
</programlisting>
   <para>
      The above resource can publish and receive &XML-BIND-API; objects.  It is assumed they are wrapped in a collection element
   </para>
<programlisting><![CDATA[
<collection>
    <customer><name>bill</name></customer>
    <customer><name>monica</name></customer>
<collection>]]>
</programlisting>
   <para>The namespace URI, namespace tag, and collection element name can be changed by using the @org.jboss.resteasy.annotations.providers.jaxb.Wrapped annotation on a parameter or method</para>
<programlisting>
@Target({ElementType.PARAMETER, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
public @interface Wrapped
{
    String element() default "collection";

    String namespace() default "http://jboss.org/resteasy";

    String prefix() default "resteasy";
}
</programlisting>
<para>To output this XML</para>
<programlisting><![CDATA[
<foo:list xmlns:foo="http://foo.org">
    <customer><name>bill</name></customer>
    <customer><name>monica</name></customer>
</foo:list>]]>
</programlisting>
<para>The @Wrapped annotation would be used as follows: </para>
<programlisting><![CDATA[
@GET
@Path("list")
@Produces("application/xml")
@Wrapped(element="list", namespace="http://foo.org", prefix="foo")
public List<Customer> getCustomerSet()
{
    List<Customer> list = new ArrayList<Customer>();
    list.add(new Customer("bill"));
    list.add(new Customer("monica"));

    return list;
}]]>
</programlisting>

  <sect2 id="collections_on_client">
  <title>Retrieving Collections on the client side</title>
  <para>
  To retrieve a <classname>List</classname>
  or <classname>Set</classname> of &XML-BIND-API; objects on the client side, the element type returned
      in the List or Set must be identified.  Below the call to <methodname>readEntity()</methodname> will
      fail because the class type, Customer has not been properly identified:
  </para>

<programlisting>
      Response response = request.get();
      List&lt;Customer&gt; list = response.readEntity(List.class);
</programlisting>

  <para>
      Use <classname>jakarta.ws.rs.core.GenericType</classname> to declare the data type,<classname>Customer</classname>,
      returned within the List.
  </para>

<programlisting>
      Response response = request.get();
      GenericType&lt;List&lt;Customer&gt;&gt; genericType = new GenericType&lt;List&lt;Customer&gt;&gt;() {};
      List&lt;Customer&gt; list = response.readEntity(genericType);
</programlisting>

  <para>
  For more information about <classname>GenericType</classname>, please see its javadoc.
  </para>

  <para>
  The same strategy applies to retrieving a <classname>Set</classname>:
  </para>

<programlisting>
      Response response = request.get();
      GenericType&lt;Set&lt;Customer&gt;&gt; genericType = new GenericType&lt;Set&lt;Customer&gt;&gt;() {};
      Set&lt;Customer&gt; set = response.readEntity(genericType);
</programlisting>

  <para>
  <classname>GenericType</classname> is not necessary to retrieve an array of &XML-BIND-API; objects:
  </para>

<programlisting>
      Response response = request.get();
      Customer[] array = response.readEntity(Customer[].class);
</programlisting>
  </sect2>

  <sect2 id="json_list">
    <title>JSON and &XML-BIND-API; Collections/arrays</title>
    <para>RESTEasy supports using collections with JSON.  It encloses List, Set, or arrays of returned XML objects within a simple
    JSON array.  For example:</para>
<programlisting>
@XmlRootElement
@XmlAccessorType(XmlAccessType.FIELD)
public static class Foo
{
    @XmlAttribute
    private String test;

    public Foo()
    {
    }

    public Foo(String test)
    {
        this.test = test;
    }

    public String getTest()
    {
        return test;
    }

    public void setTest(String test)
    {
        this.test = test;
    }
}
</programlisting>
 <para>A List or array of Foo class would be represented in JSON like this:</para>
<programlisting><![CDATA[
[{"foo":{"@test":"bill"}},{"foo":{"@test":"monica}"}}]]]>
</programlisting>
 <para>It also expects this format for input</para>
  </sect2>
</sect1>
   <sect1 id="XML_Map">
      <title>Maps of XML Objects</title>
      <para>
         RESTEasy automatically
         marshals maps of &XML-BIND-API; objects to and from XML, JSON, Fastinfoset (or any other new &XML-BIND-API; mapper).
         The parameter or method return type must be a generic with a String as the key and the &XML-BIND-API; object's type.
     </para>
<programlisting><![CDATA[
@XmlRootElement(namespace = "http://foo.com")
public static class Foo
{
    @XmlAttribute
    private String name;

    public Foo()
    {
    }

    public Foo(String name)
    {
        this.name = name;
    }

    public String getName()
    {
        return name;
    }
}

@Path("/map")
public static class MyResource
{
    @POST
    @Produces("application/xml")
    @Consumes("application/xml")
    public Map<String, Foo> post(Map<String, Foo> map)
    {
        Assert.assertEquals(2, map.size());
        Assert.assertNotNull(map.get("bill"));
        Assert.assertNotNull(map.get("monica"));
        Assert.assertEquals(map.get("bill").getName(), "bill");
        Assert.assertEquals(map.get("monica").getName(), "monica");
        return map;
    }
}]]>
</programlisting>
   <para>
      The above resource can publish and receive XML objects within a map.  By default, they are wrapped in a "map" element in the
      default namespace.  Also, each "map" element has zero or more "entry" elements with a "key" attribute.
   </para>
<programlisting><![CDATA[
<map>
    <entry key="bill" xmlns="http://foo.com">
        <foo name="bill"/>
    </entry>
    <entry key="monica" xmlns="http://foo.com">
        <foo name="monica"/>
    </entry>
</map>]]>
</programlisting>
   <para>The namespace URI, namespace prefix and map, entry, and key element and attribute names
       can be changed by using the @org.jboss.resteasy.annotations.providers.jaxb.WrappedMap annotation on a parameter or method</para>
<programlisting>
@Target({ElementType.PARAMETER, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
public @interface WrappedMap
{
    /**
     * map element name
     */
    String map() default "map";

    /**
     * entry element name *
     */
    String entry() default "entry";

    /**
     * entry's key attribute name
     */
    String key() default "key";

    String namespace() default "";

    String prefix() default "";
}
</programlisting>
<para>To output this XML</para>
<programlisting><![CDATA[
<hashmap>
    <hashentry hashkey="bill" xmlns:foo="http://foo.com">
        <foo:foo name="bill"/>
    </hashentry>
</map>]]>
</programlisting>
<para>Use the @WrappedMap annotation as follows: </para>
<programlisting><![CDATA[
@Path("/map")
public static class MyResource
{
    @GET
    @Produces("application/xml")
    @WrappedMap(map="hashmap", entry="hashentry", key="hashkey")
    public Map<String, Foo> get()
    {
        ...
        return map;
    }
}]]>
</programlisting>

  <sect2 id="maps_client_side">
  <title>Retrieving Maps on the client side</title>
  <para>
  To retrieve a <classname>Map</classname>
  of XML objects on the client side, the element types returned
      in the Map must be identified.  Below the call to <methodname>readEntity()</methodname> will
      fail because the class types, String and Customer have not been properly identified:
  </para>

<programlisting>
      Response response = request.get();
      Map&lt;String, Customer&gt; map = response.readEntity(Map.class);
</programlisting>

      <para>
          Use <classname>jakarta.ws.rs.core.GenericType</classname> to declare the data types,
          <classname>String</classname> and <classname>Customer</classname>,
          returned within the Map.
      </para>

<programlisting>
      Response response = request.get();
      GenericType&lt;Map&lt;String, Customer&gt; genericType = new GenericType&lt;Map&lt;String, Customer&gt;&gt;() {};
      Map&lt;String, Customer&gt; map = response.readEntity(genericType);
</programlisting>

  <para>
  For more information about <classname>GenericType</classname>, please see its javadoc.
  </para>
  </sect2>

  <sect2 id="json_map">
    <title>JSON and XML maps</title>
    <para>RESTEasy supports using maps with JSON.  It encloses maps returned XML objects within a simple
    JSON map.  For example:</para>
<programlisting>
@XmlRootElement
@XmlAccessorType(XmlAccessType.FIELD)
public static class Foo
{
    @XmlAttribute
    private String test;

    public Foo()
    {
    }

    public Foo(String test)
    {
        this.test = test;
    }

    public String getTest()
    {
        return test;
    }

    public void setTest(String test)
    {
        this.test = test;
    }
}
</programlisting>
 <para>A List or array of this Foo class would be represented in JSON like this:</para>
<programlisting><![CDATA[
{ "entry1" : {"foo":{"@test":"bill"}}, "entry2" : {"foo":{"@test":"monica}"}}}]]>
</programlisting>
 <para>It also expects this format for input</para>
  </sect2>
</sect1>
<sect1 id="XML_BIND_INTERFACES">
   <title>Interfaces, Abstract Classes, and &XML-BIND-API;</title>
   <para>
    Some objects models use abstract classes and interfaces heavily.  Unfortunately, &XML-BIND-API; doesn't work with interfaces
    that are root elements and RESTEasy can't unmarshal parameters that are interfaces or raw abstract classes because
    it doesn't have enough information to create a JAXBContext.  For example:
   </para>
<programlisting>
public interface IFoo {}

@XmlRootElement
public class RealFoo implements IFoo {}

@Path("/xml")
public class MyResource {

    @PUT
    @Consumes("application/xml")
    public void put(IFoo foo) {...}
}
</programlisting>
<para>
  In this example, RESTEasy will report error, "Cannot find a MessageBodyReader for...".  This is because
  RESTEasy does not know that implementations of IFoo are &XML-BIND-API; classes and doesn't know how to create a JAXBContext for it.  As a workaround,
 RESTEasy allows the use of &XML-BIND-API; annotation @XmlSeeAlso on the interface to correct the problem.  (NOTE, this will not work with manual, hand-coded &XML-BIND-API;).
</para>
<programlisting>
@XmlSeeAlso(RealFoo.class)
public interface IFoo {}
</programlisting>
<para>
The extra @XmlSeeAlso on IFoo allows RESTEasy to create a JAXBContext that knows how to unmarshal RealFoo instances.
</para>
</sect1>

<sect1 id="configuration">
   <title>Configuring &XML-BIND-API; Marshalling</title>
   <para>
     As a consumer of XML datasets, &XML-BIND-API; is subject to a form of attack
     known as the XXE (Xml eXternal Entity) Attack
     (<ulink url="https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing">https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing</ulink>),
     in which expanding an external entity causes an unsafe file to be loaded.  Preventing the expansion of
     external entities is discussed in <xref linkend="Configuring_Document_Marshalling"/>.  The same
     parameter,
   </para>

   <blockquote>
     resteasy.document.expand.entity.references
   </blockquote>

   <para>applies to &XML-BIND-API; unmarshallers.</para>


   <para>
     <xref linkend="Configuring_Document_Marshalling"/> also discusses the prohibition of DTDs and the
     imposition of limits on entity expansion and the number of attributes per element. The parameters
   </para>

   <blockquote>
     resteasy.document.secure.disableDTDs
   </blockquote>

   <para>and</para>

   <blockquote>
     resteasy.document.secure.processing.feature
   </blockquote>

   <para>
     discussed there, and their default values, also apply to the representation of &XML-BIND-API; objects.
   </para>
</sect1>
</chapter>
